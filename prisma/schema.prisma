// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  firstName    String
  lastName     String
  passwordHash String
  createdAt    DateTime @default(now())
  udpatedAt    DateTime @updatedAt

  sessions Session[]
  accounts Account[]
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Account {
  id        String      @id @default(uuid())
  type      AccountType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  owner      User               @relation(fields: [userId], references: [id])
  userId     String
  statements AccountStatement[]
  debits     Transaction[]      @relation(name: "debit")
  credit     Transaction[]      @relation(name: "credit")
}

enum AccountType {
  internal
  external
}

model AccountStatement {
  date    DateTime @db.Date
  balance Float
  credit  Float
  debit   Float

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@id([accountId, date])
}

model Ledger {
  id      String    @id @default(uuid())
  date    DateTime? @unique @db.Date
  balance Float

  transactions Transaction[]
}

model Transaction {
  id     String   @id @default(uuid())
  date   DateTime @default(now())
  amount Float

  ledger   Ledger  @relation(fields: [ledgerId], references: [id])
  ledgerId String
  to       Account @relation(name: "debit", fields: [toId], references: [id])
  toId     String
  from     Account @relation(name: "credit", fields: [fromId], references: [id])
  fromId   String
}
